import java.math.BigInteger;

public class Ejer1Algo2 {
	
	public static BigInteger euclides(BigInteger dividendo1, BigInteger divisor2){
		
		if((divisor2.compareTo(dividendo1) > 0)){		
			BigInteger auxiliar = dividendo1;			// T(n) = 1
			dividendo1 = divisor2;						// T(n) = 1
			divisor2 = auxiliar;						// T(n) = 1
		}													//// T(n) = condition + content = 1 + 3 = 4
			
		BigInteger bigInt0 = new BigInteger("0");			//// T(n) = 1
		BigInteger bigInt1 = new BigInteger("1");			//// T(n) = 1
			
		if((divisor2.compareTo(bigInt0) == 0) || (dividendo1.compareTo(bigInt0) == 0)){	
			return bigInt0;								// T(n) = 1
		}													//// T(n) = condition + content = 2 + 1 = 3
			
		BigInteger cociente;
		BigInteger producto;							
		BigInteger resto = new BigInteger("1");				//// T(n) = 1
	
		
		if (dividendo1.divide(divisor2).compareTo(bigInt1) == 0) {
			return dividendo1;							// T(n) = 1
		} else if (dividendo1.remainder(divisor2).compareTo(bigInt0) == 0){
			return divisor2;							// T(n) = 1
		}													//// T(n) = conditionn_if + condition_else + content_else = 2 + 2 + 1 = 5
		
		
		while(resto.compareTo(bigInt0) > 0){		
			cociente = dividendo1.divide(divisor2);		// T(n) = 2
			producto = divisor2.multiply(cociente);		// T(n) = 2
			resto = dividendo1.subtract(producto);		// T(n) = 2	
			dividendo1 = divisor2;						// T(n) = 1
			
			if (resto.compareTo(bigInt0) == 0) {
				return divisor2;					// T(n) = 1
			}											// T(n) = condition + content = 1 + 1 = 2
			
			divisor2 = resto;							// T(n) = 1				
		}													//// T(n) = condition + P(content + condition) = 1 + P(10 + 1)
														// P = 
		return divisor2;								// T(n) = 1
	}
	
}																	//// T(n) = 4 + 1 + 1 + 3 + 1 + 5 + while + 1 = 16 + while
