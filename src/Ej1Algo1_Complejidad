	public static BigInteger calcMaxComDiv(BigInteger numero1, BigInteger numero2) {
		BigInteger maxComDivisor = new BigInteger("1");					//// T(n) = 1
		
		BigInteger bigInt0 = new BigInteger("0");						//// T(n) = 1
		
		if((numero1.compareTo(bigInt0) == 0) || (numero2.compareTo(bigInt0) == 0)){
			return bigInt0;												// T(n) = 1
		}																//// T(n) = 2 + 1 = 3
		
		Vector<DivisorAlgo1> factores1 = new Vector<DivisorAlgo1>();  	//// T(n) = 1
		factores1 = calcFactores(numero1);								//// T(n) = 1 + algoritmo = 1 + 12 + 8n + 7n^2 = 13 + 8n + 7n^2
	
		Vector<DivisorAlgo1> factores2 = new Vector<DivisorAlgo1>();   	//// T(n) = 1
		factores2 = calcFactores(numero2);								//// T(n) = 1 + algoritmo = 1 + 12 + 8n + 7n^2 = 13 + 8n + 7n^2
				
		maxComDivisor = calcComDiv(numero1, numero2, factores1, factores2);	//// T(n) = 1 + algoritmo = 1 + 5 + 7n + 25n^2 = 6 + 7n + 25n^2
		
		return maxComDivisor;											//// T(n) = 1
	}																				//// 1 + 1 + 3 + 1 + 13 + 8n + 7n^2 + 1 + 13 + 8n + 7n^2 + 6 + 7n + 25n^2 + 1 = 40 + 23n + 39n^2 
	
	
	private static Vector<DivisorAlgo1> calcFactores(BigInteger numero) {
		Vector<DivisorAlgo1> factores = new Vector<DivisorAlgo1>();		//// T(n) = 1
		factores.add(new DivisorAlgo1());								//// T(n) = 2
		BigInteger auxDiv = BigInteger.valueOf(numero.intValue());		//// T(n) = 3
		BigInteger bigInt0 = new BigInteger("0");						//// T(n) = 1
		BigInteger bigInt2 = new BigInteger("2");						//// T(n) = 1
		
		for (BigInteger i = new BigInteger("2"); i.compareTo(numero.divide(bigInt2)) == -1; i = i.nextProbablePrime()) {
			BigInteger primo = i;										// T(n) = 1
			BigInteger resto = auxDiv.remainder(primo);					// T(n) = 2	

			for (; resto.compareTo(bigInt0) == 0;) {
				factores.add(new DivisorAlgo1(primo, false));		// T(n) = 2
				auxDiv = auxDiv.divide(primo);						// T(n) = 2	
				resto = auxDiv.remainder(primo);					// T(n) = 2
			}														//// T(n) = 0 + 1 + n(1 + 0 + exp) = 1 + n(1 + 6) = 1 + 7n			
		}																//// T(n) = 1 + 2 + n(2 + 2 + exp) = 3 + n(4 + 2 + 1 + 1 + 7n) = 3 + 8n + 7n^2	
		
		return factores;												//// T(n) = 1
	}																		//// T(n) = 1 + 2 + 3 + 1 + 1 + 3 + 8n + 7n^2 + 1 = 12 + 8n + 7n^2
	
	
	private static BigInteger calcComDiv(BigInteger numero1, BigInteger numero2, Vector<DivisorAlgo1> factores1,
			Vector<DivisorAlgo1> factores2) {
		BigInteger maxComDiv = new BigInteger("1");						//// T(n) = 1
		
		for (int i = 0; i < factores1.size(); ++i) {
			for (int j = 0; j < factores2.size(); ++j) {
				if (factores1.get(i).getValor().intValue() == factores2.get(j).getValor().intValue() && 
						!factores1.get(i).isUsado() && !factores2.get(j).isUsado()) {
					maxComDiv = maxComDiv.multiply(factores1.get(i).getValor());	// T(n) = 4
					factores1.get(i).setUsado(true);			// T(n) = 2
					factores2.get(j).setUsado(true);			// T(n) = 2
				}												//// T(n) = (7 + 3 + 3) + (4 + 2 + 2) = 21
			}														//// T(n) =  1 + 2 + n(2 + 2 + exp) = 3 + n(4 + 21) = 3 + 25n 
		}																//// T(n) = 1 + 2 + n(2 + 2 + exp) = 3 + n(4 + 3 + 25n) = 3 + 7n + 25n^2
				
		return maxComDiv;												//// T(n) = 1
	}																		//// T(n) = 1+ 3 + 7n + 25n^2 + 1 = 5 + 7n + 25n^2
	
	
	
	
	
	//COMPLEJIDAD TOTAL = 40 + 23n + 39n^2 